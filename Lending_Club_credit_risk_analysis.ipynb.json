{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For Mr. Rudra"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the Lending club credit risk analysis project."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First step: download the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42538, 111)\n"
     ]
    }
   ],
   "source": [
    "# Download the dataset which includes approved loans data from 2007 to 2011.\n",
    "# https://www.lendingclub.com/info/download-data.action.\n",
    "# You can find the meaning of each column of the table by checking DATA DICTIONARY.\n",
    "# DATA DICTIONARY: https://www.lendingclub.com/info/download-data.action.\n",
    "\n",
    "import pandas as pd\n",
    "loans_2007 = pd.read_csv('/Users/liaoyantai/Downloads/LoanStats3a.csv', skiprows=1,\\\n",
    "                         low_memory=False)\n",
    "print(loans_2007.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Second step: Data cleaning and preparing the features "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42538, 109)\n"
     ]
    }
   ],
   "source": [
    "# The 'id' column and 'member_id' column are empty, so delete them firstly.\n",
    "\n",
    "loans = loans_2007.drop(['id', 'member_id'],axis=1)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42538, 107)\n"
     ]
    }
   ],
   "source": [
    "# The 'desc' cloumn contains a long text explanation for each loan. \n",
    "# The 'url' cloumn contains a link to each loan on Lending Club which can only be accessed with\n",
    "# an investor account.\n",
    "# Drop these two columns.\n",
    "\n",
    "loans = loans.drop(['desc', 'url'],axis=1)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42538, 50)\n"
     ]
    }
   ],
   "source": [
    "# For efficiency removing all columns containing more than 50% missing values. This may lose \n",
    "# some information but speed processing since we can spend less time trying to fill these values.\n",
    "\n",
    "half_count = len(loans) / 2\n",
    "loans = loans.dropna(thresh=half_count, axis=1)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Export the table for further reference.\n",
    "\n",
    "loans.to_csv('/Users/liaoyantai/Downloads/Loans.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42538, 44)\n"
     ]
    }
   ],
   "source": [
    "# funded_amnt: leaks data from the future (after the loan is already started to be funded).\n",
    "# funded_amnt_inv: also leaks data from the future (after the loan is already started to be funded)\n",
    "# grade: contains redundant information as the interest rate column (int_rate).\n",
    "# sub_grade: also contains redundant information as the interest rate column (int_rate).\n",
    "# emp_title: requires other data and a lot of processing to potentially be useful\n",
    "# issue_d: leaks data from the future (after the loan is already completed funded)\n",
    "\n",
    "loans=loans.drop(['funded_amnt','funded_amnt_inv',\\\n",
    "                'grade','sub_grade','emp_title','issue_d'],axis=1)\n",
    "print(loans.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42538, 38)\n"
     ]
    }
   ],
   "source": [
    "# zip_code: redundant with the addr_state column\n",
    "# out_prncp: leaks data from the future, (after the loan already started to be paid off)\n",
    "# out_prncp_inv: also leaks data from the future, (after the loan already started to be paid off)\n",
    "# total_pymnt: also leaks data from the future, (after the loan already started to be paid off)\n",
    "# total_pymnt_inv: also leaks data from the future, (after the loan already started to be paid off)\n",
    "# total_rec_prncp: also leaks data from the future, (after the loan already started to be paid off)\n",
    "\n",
    "loans = loans.drop(['zip_code','out_prncp','out_prncp_inv',\\\n",
    "                            'total_pymnt','total_pymnt_inv','total_rec_prncp'],axis=1)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42538, 32)\n"
     ]
    }
   ],
   "source": [
    "# total_rec_int: leaks data from the future, (after the loan already started to be paid off)\n",
    "# total_rec_late_fee: also leaks data from the future, (after the loan already started to be paid off)\n",
    "# recoveries: also leaks data from the future, (after the loan already started to be paid off)\n",
    "# collection_recovery_fee: also leaks data from the future, (after the loan already started to be paid off)\n",
    "# last_pymnt_d: also leaks data from the future, (after the loan already started to be paid off)\n",
    "# last_pymnt_amnt: also leaks data from the future, (after the loan already started to be paid off)\n",
    "\n",
    "loans = loans.drop(['total_rec_int','total_rec_late_fee','recoveries',\\\n",
    "                            'collection_recovery_fee','last_pymnt_d','last_pymnt_amnt'],axis=1)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fully Paid                                             34115\n",
      "Charged Off                                             5670\n",
      "Does not meet the credit policy. Status:Fully Paid      1988\n",
      "Does not meet the credit policy. Status:Charged Off      761\n",
      "Late (31-120 days)                                         1\n",
      "Name: loan_status, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# The 'loan_status' column is the target column which we need to predict in the future, so we \n",
    "# need to find the all of the unique value of it.\n",
    "\n",
    "print(loans['loan_status'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# The 'loan_sataus' has five different values but we just choose 'Fully Paid' and 'Charged Off',\n",
    "# and transfer them to 1 and o as binary classification.\n",
    "# Fully Paid: Loan has been fully paid off.\n",
    "# Charged off: Loan for which there is no longer a reasonable expectation of further payments.\n",
    "\n",
    "loans =loans[(loans['loan_status']=='Fully Paid') | (loans['loan_status']=='Charged Off')]\n",
    "loan_status_mapping_dict = {'loan_status':{'Fully Paid':1,'Charged Off':0 }}\n",
    "loans =loans.replace(loan_status_mapping_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['pymnt_plan', 'initial_list_status', 'collections_12_mths_ex_med', 'policy_code', 'application_type', 'acc_now_delinq', 'chargeoff_within_12_mths', 'delinq_amnt', 'tax_liens']\n"
     ]
    }
   ],
   "source": [
    "# Find the columns that contain only one unique value. These columns won't be useful for the \n",
    "# model since they don't add any information to each loan application.\n",
    "\n",
    "columns = loans.columns\n",
    "drop_columns =[]\n",
    "for col in columns:\n",
    "    leng_loans_col=loans[col].dropna().unique()\n",
    "    if len(leng_loans_col)==1:\n",
    "        drop_columns.append(col)\n",
    "        \n",
    "print(drop_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(39785, 23)\n"
     ]
    }
   ],
   "source": [
    "# Drop these one-value columns.\n",
    "\n",
    "loans=loans.drop(drop_columns, axis=1)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loan_amnt                 0\n",
      "term                      0\n",
      "int_rate                  0\n",
      "installment               0\n",
      "emp_length                0\n",
      "home_ownership            0\n",
      "annual_inc                0\n",
      "verification_status       0\n",
      "loan_status               0\n",
      "purpose                   0\n",
      "title                    10\n",
      "addr_state                0\n",
      "dti                       0\n",
      "delinq_2yrs               0\n",
      "earliest_cr_line          0\n",
      "inq_last_6mths            0\n",
      "open_acc                  0\n",
      "pub_rec                   0\n",
      "revol_bal                 0\n",
      "revol_util               50\n",
      "total_acc                 0\n",
      "last_credit_pull_d        2\n",
      "pub_rec_bankruptcies    697\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Return the number of missing values across the Dataframe.\n",
    "\n",
    "null_counts = loans.isnull().sum()\n",
    "print(null_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(39723, 22)\n"
     ]
    }
   ],
   "source": [
    "# Drop the 'pub_rec_bankruptcies' column since more than 1% of the rows have a missing value \n",
    "# for this column.\n",
    "# Remove the remaining rows containing null values since these rows' number are less than 1% of \n",
    "# total rows.\n",
    "# For the missing value we also can fill it by the  median value of the correspinding attribute\n",
    "# from the 10 or 20 closest point. But for this project we don't do this for efficiency. \n",
    "\n",
    "loans=loans.drop('pub_rec_bankruptcies',axis=1)\n",
    "loans=loans.dropna(axis=0)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object     11\n",
      "float64    10\n",
      "int64       1\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Find the data type for all columns since we can only fit model by numerical variables.\n",
    "\n",
    "print(loans.dtypes.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "term                     36 months\n",
      "int_rate                    10.65%\n",
      "emp_length               10+ years\n",
      "home_ownership                RENT\n",
      "verification_status       Verified\n",
      "purpose                credit_card\n",
      "title                     Computer\n",
      "addr_state                      AZ\n",
      "earliest_cr_line          Jan-1985\n",
      "revol_util                   83.7%\n",
      "last_credit_pull_d        Mar-2017\n",
      "Name: 0, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Find all non numerical columns.\n",
    "\n",
    "object_columns_df = loans.select_dtypes(include=['object'])\n",
    "print(object_columns_df.iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "debt_consolidation    18660\n",
      "credit_card            5134\n",
      "other                  3985\n",
      "home_improvement       2980\n",
      "major_purchase         2182\n",
      "small_business         1827\n",
      "car                    1549\n",
      "wedding                 947\n",
      "medical                 693\n",
      "moving                  581\n",
      "house                   382\n",
      "vacation                380\n",
      "educational             320\n",
      "renewable_energy        103\n",
      "Name: purpose, dtype: int64\n",
      "Debt Consolidation                                               2188\n",
      "Debt Consolidation Loan                                          1732\n",
      "Personal Loan                                                     661\n",
      "Consolidation                                                     516\n",
      "debt consolidation                                                508\n",
      "Credit Card Consolidation                                         357\n",
      "Home Improvement                                                  357\n",
      "Debt consolidation                                                334\n",
      "Small Business Loan                                               329\n",
      "Credit Card Loan                                                  319\n",
      "Personal                                                          309\n",
      "Consolidation Loan                                                256\n",
      "Home Improvement Loan                                             249\n",
      "personal loan                                                     234\n",
      "personal                                                          220\n",
      "Loan                                                              213\n",
      "Wedding Loan                                                      209\n",
      "consolidation                                                     205\n",
      "Car Loan                                                          204\n",
      "Other Loan                                                        192\n",
      "Credit Card Payoff                                                155\n",
      "Wedding                                                           154\n",
      "Major Purchase Loan                                               145\n",
      "Credit Card Refinance                                             144\n",
      "Consolidate                                                       127\n",
      "Medical                                                           122\n",
      "Credit Card                                                       119\n",
      "home improvement                                                  112\n",
      "My Loan                                                            94\n",
      "Credit Cards                                                       93\n",
      "                                                                 ... \n",
      "VA Home Loan Payment                                                1\n",
      "Refinance High Interest Citifinancial                               1\n",
      " Credit Card Refinancing                                            1\n",
      "Great Credit looking to consolidate                                 1\n",
      "Genral Purpose                                                      1\n",
      "Freedomin2011                                                       1\n",
      "jap                                                                 1\n",
      "WANNABE OUTADEBT!!!                                                 1\n",
      "Help us refinance our moving expenses                               1\n",
      "Transportation needs                                                1\n",
      "Moving from NM to GA                                                1\n",
      "Debt Conso/Refi *Great Credit/Income*                               1\n",
      "My vacation loan                                                    1\n",
      "Present to me                                                       1\n",
      " Credit card payoff                                                 1\n",
      "ebay payoff                                                         1\n",
      "Organizing finances                                                 1\n",
      "Putting my medical issues behind me and getting on with life!       1\n",
      "rehab loan                                                          1\n",
      "Want to lower my interest                                           1\n",
      "deep breath                                                         1\n",
      "Vehicle Financing                                                   1\n",
      "Repay Cards                                                         1\n",
      "Wedding/Honeymoon Planning                                          1\n",
      "Smoothie Spot                                                       1\n",
      "tiffinoutofdebtnow                                                  1\n",
      "materials                                                           1\n",
      "For investments                                                     1\n",
      "LENDING TREE                                                        1\n",
      "Dirt Bike                                                           1\n",
      "Name: title, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Find the unique value of column of 'purpose' and column of 'title'. The result shows that they\n",
    "# are almost same, so we will drop 'title' columns since it is more complicated.\n",
    "\n",
    "print(loans['purpose'].value_counts())\n",
    "\n",
    "print(loans['title'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(39723, 18)\n"
     ]
    }
   ],
   "source": [
    "# title: loan title provided the borrower\n",
    "# last_credit_pull_d: The most recent month Lending Club pulled credit for this loan\n",
    "# addr_state: borrower's state of residence\n",
    "# earliest_cr_line: The month the borrower's earliest reported credit line was opened\n",
    "\n",
    "loans=loans.drop(['title','last_credit_pull_d','addr_state','earliest_cr_line'],axis=1)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RENT        18881\n",
      "MORTGAGE    17687\n",
      "OWN          3056\n",
      "OTHER          96\n",
      "NONE            3\n",
      "Name: home_ownership, dtype: int64\n",
      "Not Verified       16890\n",
      "Verified           12832\n",
      "Source Verified    10001\n",
      "Name: verification_status, dtype: int64\n",
      "10+ years    8897\n",
      "< 1 year     4576\n",
      "2 years      4389\n",
      "3 years      4094\n",
      "4 years      3435\n",
      "5 years      3279\n",
      "1 year       3240\n",
      "6 years      2227\n",
      "7 years      1771\n",
      "8 years      1482\n",
      "9 years      1259\n",
      "n/a          1074\n",
      "Name: emp_length, dtype: int64\n",
      " 36 months    29041\n",
      " 60 months    10682\n",
      "Name: term, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Find the unique value of 'home_ownership', 'verification_status', 'emp_length' and'term'.\n",
    "\n",
    "cols = ['home_ownership', 'verification_status', 'emp_length', 'term']\n",
    "\n",
    "for col in cols:\n",
    "    print(loans[col].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Transfer column of 'emp_length' to numerical type.\n",
    "\n",
    "emp_length_mapping_dict = {\n",
    "    \"emp_length\": {\n",
    "        \"10+ years\": 10,\n",
    "        \"9 years\": 9,\n",
    "        \"8 years\": 8,\n",
    "        \"7 years\": 7,\n",
    "        \"6 years\": 6,\n",
    "        \"5 years\": 5,\n",
    "        \"4 years\": 4,\n",
    "        \"3 years\": 3,\n",
    "        \"2 years\": 2,\n",
    "        \"1 year\": 1,\n",
    "        \"< 1 year\": 0,\n",
    "        \"n/a\": 0\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "loans=loans.replace(emp_length_mapping_dict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Transfer these columns to numerical type.\n",
    "\n",
    "loans['int_rate']=(loans['int_rate'].str.rstrip('%').astype('float'))\n",
    "loans['revol_util']=loans['revol_util'].str.rstrip('%').astype('float')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(39723, 38)\n"
     ]
    }
   ],
   "source": [
    "# Encode the 'home_ownership', 'verification_status', 'title', and 'term' columns as dummy \n",
    "# variables so we can use them in our model. \n",
    "\n",
    "cat_columns = [\"home_ownership\", \"verification_status\", \"purpose\", \"term\"]\n",
    "dummy_df = pd.get_dummies(loans[cat_columns])\n",
    "loans = pd.concat([loans, dummy_df], axis=1)\n",
    "loans = loans.drop(cat_columns, axis=1)\n",
    "print(loans.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 39723 entries, 0 to 39785\n",
      "Data columns (total 38 columns):\n",
      "loan_amnt                              39723 non-null float64\n",
      "int_rate                               39723 non-null float64\n",
      "installment                            39723 non-null float64\n",
      "emp_length                             39723 non-null int64\n",
      "annual_inc                             39723 non-null float64\n",
      "loan_status                            39723 non-null int64\n",
      "dti                                    39723 non-null float64\n",
      "delinq_2yrs                            39723 non-null float64\n",
      "inq_last_6mths                         39723 non-null float64\n",
      "open_acc                               39723 non-null float64\n",
      "pub_rec                                39723 non-null float64\n",
      "revol_bal                              39723 non-null float64\n",
      "revol_util                             39723 non-null float64\n",
      "total_acc                              39723 non-null float64\n",
      "home_ownership_MORTGAGE                39723 non-null float64\n",
      "home_ownership_NONE                    39723 non-null float64\n",
      "home_ownership_OTHER                   39723 non-null float64\n",
      "home_ownership_OWN                     39723 non-null float64\n",
      "home_ownership_RENT                    39723 non-null float64\n",
      "verification_status_Not Verified       39723 non-null float64\n",
      "verification_status_Source Verified    39723 non-null float64\n",
      "verification_status_Verified           39723 non-null float64\n",
      "purpose_car                            39723 non-null float64\n",
      "purpose_credit_card                    39723 non-null float64\n",
      "purpose_debt_consolidation             39723 non-null float64\n",
      "purpose_educational                    39723 non-null float64\n",
      "purpose_home_improvement               39723 non-null float64\n",
      "purpose_house                          39723 non-null float64\n",
      "purpose_major_purchase                 39723 non-null float64\n",
      "purpose_medical                        39723 non-null float64\n",
      "purpose_moving                         39723 non-null float64\n",
      "purpose_other                          39723 non-null float64\n",
      "purpose_renewable_energy               39723 non-null float64\n",
      "purpose_small_business                 39723 non-null float64\n",
      "purpose_vacation                       39723 non-null float64\n",
      "purpose_wedding                        39723 non-null float64\n",
      "term_ 36 months                        39723 non-null float64\n",
      "term_ 60 months                        39723 non-null float64\n",
      "dtypes: float64(36), int64(2)\n",
      "memory usage: 11.8 MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(loans.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Export the final table\n",
    "\n",
    "loans.to_csv('/Users/liaoyantai/Downloads/Loans_final.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Create independent variables and dependent variable for fitting model.\n",
    "\n",
    "features = loans.drop('loan_status',axis=1)\n",
    "target = pd.Series(loans['loan_status'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34072\n",
      "5651\n"
     ]
    }
   ],
   "source": [
    "# There are 6 times as many loans that were paid off on time (1), than loans that weren't paid \n",
    "# off on time (0). There is a significant class imbalance in the loan_status column.\n",
    "\n",
    "print(len(target[target==1]))\n",
    "print(len(target[target==0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Third step: Making predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  Use logistic regression and random forest algorithms to fit the model and make the      predicitons.\n",
    "\n",
    "  In order to get a realistic depiction of the accuracy of the algorithm and avoid the overfit, I use 10 folds cross validation to generate predictions.  \n",
    "\n",
    "  An error metric will help us figure out when our model is performing well, and when it's performing poorly. Our objective in this is to make money -- we want to fund enough loans that are paid off on time to offset our losses from loans that aren't paid off. In this case, we're primarily concerned with false positives and false negatives. \n",
    "\n",
    "  With a false positive, we predict that a loan will be paid off on time, but it actually isn't. This costs us money, since we fund loans that lose us money. With a false negative, we predict that a loan won't be paid off on time, but it actually would be paid off on time. This loses us potential money, since we didn't fund a loan that actually would have been paid off.\n",
    "\n",
    "  Since we're viewing this problem from the standpoint of a conservative investor, we need to treat false positives differently than false negatives. A conservative investor would want to minimize risk, and avoid false positives as much as possible. They'd be more okay with missing out on opportunities (false negatives) than they would be with funding a risky loan (false positives).\n",
    "\n",
    "  Tell the classifier to penalize misclassifications of the less prevalent class more than the other class to get a classifier to correct for imbalanced classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3739161210405238\n",
      "0.6499765203099319\n"
     ]
    }
   ],
   "source": [
    "# set class_weight equal to 'balanced' to penalize the misclassifications in classifer.\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.cross_validation import cross_val_predict, KFold\n",
    "\n",
    "lr = LogisticRegression(class_weight='balanced')\n",
    "kf = KFold(loans.shape[0], n_folds =10,random_state=1)\n",
    "\n",
    "predictions = cross_val_predict(lr, features, target, cv=kf)\n",
    "loans['predictions']=predictions\n",
    "\n",
    "tn_filter = (loans['predictions']==0)&(loans['loan_status']==0)\n",
    "tn = len(loans[tn_filter])\n",
    "\n",
    "tp_filter = (loans['predictions']==1)&(loans['loan_status']==1)\n",
    "tp = len(loans[tp_filter])\n",
    "\n",
    "fn_filter = (loans['predictions']==0)&(loans['loan_status']==1)\n",
    "fn = len(loans[fn_filter])\n",
    "\n",
    "fp_filter = (loans['predictions']==1)&(loans['loan_status']==0)\n",
    "fp = len(loans[fp_filter])\n",
    "\n",
    "fpr = fp/(fp+tn)\n",
    "print(fpr)\n",
    "\n",
    "tpr = tp/(tp+fn)\n",
    "print(tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.08405591930631746\n",
      "0.2343273068795492\n"
     ]
    }
   ],
   "source": [
    "# set class_weight equal to dict of penalty to penalize the misclassifications in classifer.\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.cross_validation import cross_val_predict\n",
    "\n",
    "penalty = {\n",
    "    0:10,\n",
    "    1:1\n",
    "}\n",
    "\n",
    "lr=LogisticRegression(class_weight= penalty)\n",
    "kf = KFold(loans.shape[0], n_folds =10,random_state=1)\n",
    "\n",
    "predictions = cross_val_predict(lr, features, target, cv=kf)\n",
    "loans['predictions']=predictions\n",
    "\n",
    "tn_filter = (loans['predictions']==0)&(loans['loan_status']==0)\n",
    "tn = len(loans[tn_filter])\n",
    "\n",
    "tp_filter = (loans['predictions']==1)&(loans['loan_status']==1)\n",
    "tp = len(loans[tp_filter])\n",
    "\n",
    "fn_filter = (loans['predictions']==0)&(loans['loan_status']==1)\n",
    "fn = len(loans[fn_filter])\n",
    "\n",
    "fp_filter = (loans['predictions']==1)&(loans['loan_status']==0)\n",
    "fp = len(loans[fp_filter])\n",
    "\n",
    "fpr = fp/(fp+tn)\n",
    "print(fpr)\n",
    "\n",
    "tpr = tp/(tp+fn)\n",
    "print(tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.914528402052734\n",
      "0.9653381075369805\n"
     ]
    }
   ],
   "source": [
    "# set class_weight equal to None.\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.cross_validation import cross_val_predict\n",
    "\n",
    "\n",
    "rf=RandomForestClassifier(random_state =1)\n",
    "kf = KFold(features.shape[0],n_folds=10, random_state=1)\n",
    "predictions = cross_val_predict(rf, features, target, cv=kf)\n",
    "\n",
    "loans['predictions']=predictions\n",
    "\n",
    "tn_filter = (loans['predictions']==0)&(loans['loan_status']==0)\n",
    "tn = len(loans[tn_filter])\n",
    "\n",
    "tp_filter = (loans['predictions']==1)&(loans['loan_status']==1)\n",
    "tp = len(loans[tp_filter])\n",
    "\n",
    "fn_filter = (loans['predictions']==0)&(loans['loan_status']==1)\n",
    "fn = len(loans[fn_filter])\n",
    "\n",
    "fp_filter = (loans['predictions']==1)&(loans['loan_status']==0)\n",
    "fp = len(loans[fp_filter])\n",
    "\n",
    "fpr = fp/(fp+tn)\n",
    "print(fpr)\n",
    "\n",
    "tpr = tp/(tp+fn)\n",
    "print(tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9451424526632455\n",
      "0.975786569617281\n"
     ]
    }
   ],
   "source": [
    "# set class_weight equal to 'balanced' to penalize the misclassifications in classifer.\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.cross_validation import cross_val_predict\n",
    "\n",
    "rf=RandomForestClassifier(random_state =1,class_weight= 'balanced')\n",
    "kf = KFold(features.shape[0],n_folds=10, random_state=1)\n",
    "predictions = cross_val_predict(rf, features, target, cv=kf)\n",
    "\n",
    "loans['predictions']=predictions\n",
    "\n",
    "tn_filter = (loans['predictions']==0)&(loans['loan_status']==0)\n",
    "tn = len(loans[tn_filter])\n",
    "\n",
    "tp_filter = (loans['predictions']==1)&(loans['loan_status']==1)\n",
    "tp = len(loans[tp_filter])\n",
    "\n",
    "fn_filter = (loans['predictions']==0)&(loans['loan_status']==1)\n",
    "fn = len(loans[fn_filter])\n",
    "\n",
    "fp_filter = (loans['predictions']==1)&(loans['loan_status']==0)\n",
    "fp = len(loans[fp_filter])\n",
    "\n",
    "fpr = fp/(fp+tn)\n",
    "print(fpr)\n",
    "\n",
    "tpr = tp/(tp+fn)\n",
    "print(tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9451424526632455\n",
      "0.9753756750410895\n"
     ]
    }
   ],
   "source": [
    "# set class_weight equal to dict of penalty to penalize the misclassifications in classifer.\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.cross_validation import cross_val_predict\n",
    "\n",
    "penalty = {\n",
    "    0:10,\n",
    "    1:1\n",
    "}\n",
    "\n",
    "rf=RandomForestClassifier(random_state =1,class_weight= penalty)\n",
    "kf = KFold(features.shape[0],n_folds=10, random_state=1)\n",
    "predictions = cross_val_predict(rf, features, target, cv=kf)\n",
    "\n",
    "loans['predictions']=predictions\n",
    "\n",
    "tn_filter = (loans['predictions']==0)&(loans['loan_status']==0)\n",
    "tn = len(loans[tn_filter])\n",
    "\n",
    "tp_filter = (loans['predictions']==1)&(loans['loan_status']==1)\n",
    "tp = len(loans[tp_filter])\n",
    "\n",
    "fn_filter = (loans['predictions']==0)&(loans['loan_status']==1)\n",
    "fn = len(loans[fn_filter])\n",
    "\n",
    "fp_filter = (loans['predictions']==1)&(loans['loan_status']==0)\n",
    "fp = len(loans[fp_filter])\n",
    "\n",
    "fpr = fp/(fp+tn)\n",
    "print(fpr)\n",
    "\n",
    "tpr = tp/(tp+fn)\n",
    "print(tpr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fourth step: Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1, Logistic regression (class_weight='balanced'):\n",
    "   fpr =  0.3739161210405238\n",
    "   tpr =  0.6499765203099319\n",
    "   \n",
    "2, Logistic regression (class_weight= dict of penalty):\n",
    "   fpr =  0.08405591930631746\n",
    "   tpr =  0.2343273068795492\n",
    "   \n",
    "3, RandomForest regression (class_weight= None):\n",
    "   fpr =  0.914528402052734\n",
    "   tpr =  0.9653381075369805\n",
    "   \n",
    "4, RandomForest regression (class_weight= 'balanced'):\n",
    "   fpr =  0.9451424526632455\n",
    "   tpr =  0.975786569617281\n",
    "   \n",
    "5, RandomForest regression (class_weight= dict of penalty):\n",
    "   fpr =  0.9451424526632455\n",
    "   tpr =  0.9753756750410895\n",
    "   \n",
    "From the above result we can see that the second model has the lowest fpr (the lowest risk). Note that this comes at the expense of true positive rate. While we have fewer false positives, we're also missing opportunities to fund more loans and potentially make more money. Given that we're approaching this as a conservative investor, this strategy makes sense, but it's worth keeping in mind the tradeoffs. \n",
    "\n",
    "Of course we may improve our models by trying more different penalties or applying different algorithm (even the ensemble of the different algorithms). We also can pay more attention to  the attributes selection and preparation, or derivating the new attributes by combinating the different attributes. These steps may improve our model performance.\n",
    "   "
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
